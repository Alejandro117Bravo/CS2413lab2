#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>


typedef struct {
    int* data;
    int front, rear, size, capacity;
} Queue;


Queue* createQueue(int capacity) {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->data = (int*)malloc(capacity * sizeof(int));
    queue->front = queue->size = 0;
    queue->rear = capacity - 1;
    queue->capacity = capacity;
    return queue;
}


bool isEmpty(Queue* queue) {
    return queue->size == 0;
}


void enqueue(Queue* queue, int x) {
    queue->rear = (queue->rear + 1) % queue->capacity;
    queue->data[queue->rear] = x;
    queue->size++;
}


int dequeue(Queue* queue) {
    int item = queue->data[queue->front];
    queue->front = (queue->front + 1) % queue->capacity;
    queue->size--;
    return item;
}


int front(Queue* queue) {
    return queue->data[queue->front];
}


void freeQueue(Queue* queue) {
    free(queue->data);
    free(queue);
}


typedef struct {
    Queue* q1;
    Queue* q2;
} MyStack;


MyStack* myStackCreate() {
    MyStack* stack = (MyStack*)malloc(sizeof(MyStack));
    stack->q1 = createQueue(100);  
    stack->q2 = createQueue(100);
    return stack;
}


void myStackPush(MyStack* obj, int x) {
    enqueue(obj->q2, x); 
    while (!isEmpty(obj->q1)) {
        enqueue(obj->q2, dequeue(obj->q1));
    }
    
    
    Queue* temp = obj->q1;
    obj->q1 = obj->q2;
    obj->q2 = temp;
}


int myStackPop(MyStack* obj) {
    return dequeue(obj->q1);
}


int myStackTop(MyStack* obj) {
    return front(obj->q1);
}


bool myStackEmpty(MyStack* obj) {
    return isEmpty(obj->q1);
}


void myStackFree(MyStack* obj) {
    freeQueue(obj->q1);
    freeQueue(obj->q2);
    free(obj);
}

/**
 * Your MyStack struct will be instantiated and called as such:
 * MyStack* obj = myStackCreate();
 * myStackPush(obj, x);
 * int param_2 = myStackPop(obj);
 * int param_3 = myStackTop(obj);
 * bool param_4 = myStackEmpty(obj);
 * myStackFree(obj);
 */
